# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  before_all do |lane, options|
    ensure_bundle_exec
  end

  after_all do |lane, options|
    begin
      sh("rm key.json")
    rescue
      puts "no secret files"
    end
  end

  desc "Clones the secrets repo for android and provides the keystore, the store API key and returns the keystore Password"
  lane :get_secrets do
    begin
      sh("git clone git@infra.jolocom.io:android-secrets")
    rescue
      puts "secrets already present"
    end
    password = prompt(
      # password is in notion
      text: "password: ",
      secure_text: true
    )
    sh(
      "openssl enc -aes-256-cbc -d -in ./android-secrets/key.enc -out ../key.json -k #{password}",
      log: false
    )
    sh(
      "openssl enc -aes-256-cbc -d -in ./android-secrets/keystorePass.enc -k #{password}",
      log: false
    )
  end

  lane :build do |options|
    releaseFilePath = File.join(Dir.pwd, "android-secrets", "JoloSmartWallet.keystore")
    build_android_app(task: 'clean')
    begin
      sh("git clone git@infra.jolocom.io:sentry-auth")
    rescue
      puts "sentry auth already present"
    end
    sh("cp ./sentry-auth/sentry.properties ../sentry.properties")
    if options[:local]
      build_android_app(
        task: 'assemble',
        build_type: 'Staging',
        print_command: false,
      )
    else
      keyPass = get_secrets.strip
      build_android_app(
        task: 'assemble',
        build_type: 'Release',
        print_command: false,
        properties: {
          "android.injected.signing.store.file" => releaseFilePath,
          "android.injected.signing.store.password" => keyPass,
          "android.injected.signing.key.alias" => "JoloSmartWallet",
          "android.injected.signing.key.password" => keyPass,
        }
      )
    end
  end

  lane :upload do |options|
    case options[:target]
    when 'release'
      upload_to_play_store
    when 'beta'
      upload_to_play_store(track: 'beta')
    end
  end

  desc "Install a build on an Android device"
  lane :staging do
    build(local: true)
    sh("adb install #{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}")
  end

  desc "Submit a new Beta Build to Play Store"
  lane :beta do
    build
    upload(target: 'beta')
  end

  desc "Submit a new Release build to Play Store"
  lane :release do
    ensure_git_branch(branch: 'master')
    ensure_git_status_clean
    build
    upload(target: 'release')
  end
end
